/* tslint:disable */
/* eslint-disable */
/**
 * TechLogist API
 * API сервер для управления логистикой
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * DTO для передачи роли на фронт
 * @export
 * @interface ModelCheckResponse
 */
export interface ModelCheckResponse {
    /**
     * Role текущего пользователя
     * @type {ModelRoleStatic}
     * @memberof ModelCheckResponse
     */
    'role'?: ModelRoleStatic;
}


/**
 * DTO для передачи данных авторизации
 * @export
 * @interface ModelLoginRequest
 */
export interface ModelLoginRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelLoginRequest
     */
    'login'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelLoginRequest
     */
    'password'?: string;
}
/**
 * DTO для создания заявки
 * @export
 * @interface ModelOrderCreate
 */
export interface ModelOrderCreate {
    /**
     * 
     * @type {string}
     * @memberof ModelOrderCreate
     */
    'cargo_description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelOrderCreate
     */
    'cargo_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelOrderCreate
     */
    'cargo_type_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelOrderCreate
     */
    'cargo_weight'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelOrderCreate
     */
    'depart_loc'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelOrderCreate
     */
    'goal_loc'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelOrderCreate
     */
    'photo_id'?: string;
}
/**
 * DTO для передачи информации о заявке
 * @export
 * @interface ModelOrderOut
 */
export interface ModelOrderOut {
    /**
     * 
     * @type {string}
     * @memberof ModelOrderOut
     */
    'cargo_description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelOrderOut
     */
    'cargo_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelOrderOut
     */
    'cargo_type_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelOrderOut
     */
    'cargo_weight'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelOrderOut
     */
    'depart_loc'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelOrderOut
     */
    'dispatcher_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelOrderOut
     */
    'driver_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelOrderOut
     */
    'goal_loc'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelOrderOut
     */
    'id'?: number;
    /**
     * 
     * @type {ModelOrderOutStatus}
     * @memberof ModelOrderOut
     */
    'order_status_name'?: ModelOrderOutStatus;
    /**
     * 
     * @type {string}
     * @memberof ModelOrderOut
     */
    'photo_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelOrderOut
     */
    'time'?: string;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const ModelOrderOutStatus = {
    NEW: 'Новый',
    ACCEPT: 'Принят',
    COMPLETE: 'Выполнен',
    CANCEL: 'Отменен'
} as const;

export type ModelOrderOutStatus = typeof ModelOrderOutStatus[keyof typeof ModelOrderOutStatus];


/**
 * DTO для передачи данных регистрации
 * @export
 * @interface ModelRegisterRequest
 */
export interface ModelRegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelRegisterRequest
     */
    'fio'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelRegisterRequest
     */
    'login'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelRegisterRequest
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelRegisterRequest
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelRegisterRequest
     */
    'role_id'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ModelRoleStatic = {
    DRIVER: 'driver',
    DISP: 'disp',
    ADMIN: 'admin',
    MAIN_ADMIN: 'mainAdmin'
} as const;

export type ModelRoleStatic = typeof ModelRoleStatic[keyof typeof ModelRoleStatic];


/**
 * Модель пользователя
 * @export
 * @interface ModelUser
 */
export interface ModelUser {
    /**
     * 
     * @type {string}
     * @memberof ModelUser
     */
    'fio'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ModelUser
     */
    'is_denied'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelUser
     */
    'login'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelUser
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelUser
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelUser
     */
    'public_id'?: string;
}
/**
 * DTO для обновления информации о пользователе
 * @export
 * @interface ModelUserUpdate
 */
export interface ModelUserUpdate {
    /**
     * 
     * @type {string}
     * @memberof ModelUserUpdate
     */
    'fio'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelUserUpdate
     */
    'login'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelUserUpdate
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelUserUpdate
     */
    'phone'?: string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Авторизация пользователя по логину и паролю
         * @summary Авторизация
         * @param {ModelLoginRequest} loginRequest Данные для авторизации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost: async (loginRequest: ModelLoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('authLoginPost', 'loginRequest', loginRequest)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Удаляет HttpOnly cookie с токеном доступа и завершает сессию пользователя
         * @summary Выход из аккаунта
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogoutPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Регистрация нового пользователя
         * @summary Регистрация
         * @param {ModelRegisterRequest} registerRequest Данные для регистрации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegisterPost: async (registerRequest: ModelRegisterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerRequest' is not null or undefined
            assertParamExists('authRegisterPost', 'registerRequest', registerRequest)
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * Авторизация пользователя по логину и паролю
         * @summary Авторизация
         * @param {ModelLoginRequest} loginRequest Данные для авторизации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLoginPost(loginRequest: ModelLoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLoginPost(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Удаляет HttpOnly cookie с токеном доступа и завершает сессию пользователя
         * @summary Выход из аккаунта
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLogoutPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLogoutPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authLogoutPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Регистрация нового пользователя
         * @summary Регистрация
         * @param {ModelRegisterRequest} registerRequest Данные для регистрации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRegisterPost(registerRequest: ModelRegisterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authRegisterPost(registerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * Авторизация пользователя по логину и паролю
         * @summary Авторизация
         * @param {ModelLoginRequest} loginRequest Данные для авторизации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost(loginRequest: ModelLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.authLoginPost(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Удаляет HttpOnly cookie с токеном доступа и завершает сессию пользователя
         * @summary Выход из аккаунта
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogoutPost(options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.authLogoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         * Регистрация нового пользователя
         * @summary Регистрация
         * @param {ModelRegisterRequest} registerRequest Данные для регистрации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegisterPost(registerRequest: ModelRegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.authRegisterPost(registerRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * Авторизация пользователя по логину и паролю
     * @summary Авторизация
     * @param {ModelLoginRequest} loginRequest Данные для авторизации
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authLoginPost(loginRequest: ModelLoginRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authLoginPost(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Удаляет HttpOnly cookie с токеном доступа и завершает сессию пользователя
     * @summary Выход из аккаунта
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authLogoutPost(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authLogoutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Регистрация нового пользователя
     * @summary Регистрация
     * @param {ModelRegisterRequest} registerRequest Данные для регистрации
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authRegisterPost(registerRequest: ModelRegisterRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authRegisterPost(registerRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ChecksApi - axios parameter creator
 * @export
 */
export const ChecksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Проверка актуальности авторизации перед доступом к защищённым страницам
         * @summary Проверка авторизации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secureCheckGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/secure/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChecksApi - functional programming interface
 * @export
 */
export const ChecksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChecksApiAxiosParamCreator(configuration)
    return {
        /**
         * Проверка актуальности авторизации перед доступом к защищённым страницам
         * @summary Проверка авторизации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secureCheckGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelCheckResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.secureCheckGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChecksApi.secureCheckGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ChecksApi - factory interface
 * @export
 */
export const ChecksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChecksApiFp(configuration)
    return {
        /**
         * Проверка актуальности авторизации перед доступом к защищённым страницам
         * @summary Проверка авторизации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secureCheckGet(options?: RawAxiosRequestConfig): AxiosPromise<ModelCheckResponse> {
            return localVarFp.secureCheckGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChecksApi - object-oriented interface
 * @export
 * @class ChecksApi
 * @extends {BaseAPI}
 */
export class ChecksApi extends BaseAPI {
    /**
     * Проверка актуальности авторизации перед доступом к защищённым страницам
     * @summary Проверка авторизации
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChecksApi
     */
    public secureCheckGet(options?: RawAxiosRequestConfig) {
        return ChecksApiFp(this.configuration).secureCheckGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrdersApi - axios parameter creator
 * @export
 */
export const OrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Получить все актуальные заявки
         * @summary Получить все актуальные заявки
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersActualGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orders/actual`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Принять заявку по ID
         * @summary Принять заявку
         * @param {string} id ID заявки
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersIdAcceptPost: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ordersIdAcceptPost', 'id', id)
            const localVarPath = `/orders/{id}/accept`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Отменяет заявку по ID
         * @summary Отменить заявку
         * @param {string} id ID заявки
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersIdCancelPost: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ordersIdCancelPost', 'id', id)
            const localVarPath = `/orders/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Завершает заявку по ID
         * @summary Завершить заявку
         * @param {string} id ID заявки
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersIdCompletePost: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ordersIdCompletePost', 'id', id)
            const localVarPath = `/orders/{id}/complete`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Снять заявку с водителя по ID
         * @summary Снять заявку с водителя
         * @param {string} id ID заявки
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersIdRejectPost: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ordersIdRejectPost', 'id', id)
            const localVarPath = `/orders/{id}/reject`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Создаёт новую заявку
         * @summary Создать заявку
         * @param {ModelOrderCreate} order Данные заявки
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersPost: async (order: ModelOrderCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'order' is not null or undefined
            assertParamExists('ordersPost', 'order', order)
            const localVarPath = `/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(order, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersApiAxiosParamCreator(configuration)
    return {
        /**
         * Получить все актуальные заявки
         * @summary Получить все актуальные заявки
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersActualGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelOrderOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersActualGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.ordersActualGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Принять заявку по ID
         * @summary Принять заявку
         * @param {string} id ID заявки
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersIdAcceptPost(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersIdAcceptPost(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.ordersIdAcceptPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Отменяет заявку по ID
         * @summary Отменить заявку
         * @param {string} id ID заявки
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersIdCancelPost(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersIdCancelPost(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.ordersIdCancelPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Завершает заявку по ID
         * @summary Завершить заявку
         * @param {string} id ID заявки
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersIdCompletePost(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersIdCompletePost(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.ordersIdCompletePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Снять заявку с водителя по ID
         * @summary Снять заявку с водителя
         * @param {string} id ID заявки
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersIdRejectPost(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersIdRejectPost(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.ordersIdRejectPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Создаёт новую заявку
         * @summary Создать заявку
         * @param {ModelOrderCreate} order Данные заявки
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersPost(order: ModelOrderCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersPost(order, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.ordersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersApiFp(configuration)
    return {
        /**
         * Получить все актуальные заявки
         * @summary Получить все актуальные заявки
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersActualGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<ModelOrderOut>> {
            return localVarFp.ordersActualGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Принять заявку по ID
         * @summary Принять заявку
         * @param {string} id ID заявки
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersIdAcceptPost(id: string, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.ordersIdAcceptPost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Отменяет заявку по ID
         * @summary Отменить заявку
         * @param {string} id ID заявки
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersIdCancelPost(id: string, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.ordersIdCancelPost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Завершает заявку по ID
         * @summary Завершить заявку
         * @param {string} id ID заявки
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersIdCompletePost(id: string, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.ordersIdCompletePost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Снять заявку с водителя по ID
         * @summary Снять заявку с водителя
         * @param {string} id ID заявки
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersIdRejectPost(id: string, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.ordersIdRejectPost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Создаёт новую заявку
         * @summary Создать заявку
         * @param {ModelOrderCreate} order Данные заявки
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersPost(order: ModelOrderCreate, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.ordersPost(order, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export class OrdersApi extends BaseAPI {
    /**
     * Получить все актуальные заявки
     * @summary Получить все актуальные заявки
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersActualGet(options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersActualGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Принять заявку по ID
     * @summary Принять заявку
     * @param {string} id ID заявки
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersIdAcceptPost(id: string, options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersIdAcceptPost(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Отменяет заявку по ID
     * @summary Отменить заявку
     * @param {string} id ID заявки
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersIdCancelPost(id: string, options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersIdCancelPost(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Завершает заявку по ID
     * @summary Завершить заявку
     * @param {string} id ID заявки
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersIdCompletePost(id: string, options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersIdCompletePost(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Снять заявку с водителя по ID
     * @summary Снять заявку с водителя
     * @param {string} id ID заявки
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersIdRejectPost(id: string, options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersIdRejectPost(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Создаёт новую заявку
     * @summary Создать заявку
     * @param {ModelOrderCreate} order Данные заявки
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersPost(order: ModelOrderCreate, options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersPost(order, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Получить пользователя по ID
         * @summary Получить пользователя
         * @param {string} id ID пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdGet', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Обновить пользователя по ID
         * @summary Обновить пользователя
         * @param {string} id ID пользователя
         * @param {ModelUserUpdate} user Данные пользователя для обновления
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdPut: async (id: string, user: ModelUserUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdPut', 'id', id)
            // verify required parameter 'user' is not null or undefined
            assertParamExists('usersIdPut', 'user', user)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Получить пользователя по ID
         * @summary Получить пользователя
         * @param {string} id ID пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Обновить пользователя по ID
         * @summary Обновить пользователя
         * @param {string} id ID пользователя
         * @param {ModelUserUpdate} user Данные пользователя для обновления
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdPut(id: string, user: ModelUserUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdPut(id, user, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Получить пользователя по ID
         * @summary Получить пользователя
         * @param {string} id ID пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ModelUser> {
            return localVarFp.usersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Обновить пользователя по ID
         * @summary Обновить пользователя
         * @param {string} id ID пользователя
         * @param {ModelUserUpdate} user Данные пользователя для обновления
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdPut(id: string, user: ModelUserUpdate, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.usersIdPut(id, user, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Получить пользователя по ID
     * @summary Получить пользователя
     * @param {string} id ID пользователя
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersIdGet(id: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Обновить пользователя по ID
     * @summary Обновить пользователя
     * @param {string} id ID пользователя
     * @param {ModelUserUpdate} user Данные пользователя для обновления
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersIdPut(id: string, user: ModelUserUpdate, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersIdPut(id, user, options).then((request) => request(this.axios, this.basePath));
    }
}



